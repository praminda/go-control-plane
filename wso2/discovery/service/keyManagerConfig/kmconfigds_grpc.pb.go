// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package keyManagerConfig

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KMDiscoveryServiceClient is the client API for KMDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KMDiscoveryServiceClient interface {
	StreamKeyManagers(ctx context.Context, opts ...grpc.CallOption) (KMDiscoveryService_StreamKeyManagersClient, error)
	FetchKeyManagers(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error)
}

type kMDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKMDiscoveryServiceClient(cc grpc.ClientConnInterface) KMDiscoveryServiceClient {
	return &kMDiscoveryServiceClient{cc}
}

func (c *kMDiscoveryServiceClient) StreamKeyManagers(ctx context.Context, opts ...grpc.CallOption) (KMDiscoveryService_StreamKeyManagersClient, error) {
	stream, err := c.cc.NewStream(ctx, &KMDiscoveryService_ServiceDesc.Streams[0], "/KMDiscoveryService/StreamKeyManagers", opts...)
	if err != nil {
		return nil, err
	}
	x := &kMDiscoveryServiceStreamKeyManagersClient{stream}
	return x, nil
}

type KMDiscoveryService_StreamKeyManagersClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type kMDiscoveryServiceStreamKeyManagersClient struct {
	grpc.ClientStream
}

func (x *kMDiscoveryServiceStreamKeyManagersClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kMDiscoveryServiceStreamKeyManagersClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kMDiscoveryServiceClient) FetchKeyManagers(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error) {
	out := new(v3.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/KMDiscoveryService/FetchKeyManagers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KMDiscoveryServiceServer is the server API for KMDiscoveryService service.
// All implementations must embed UnimplementedKMDiscoveryServiceServer
// for forward compatibility
type KMDiscoveryServiceServer interface {
	StreamKeyManagers(KMDiscoveryService_StreamKeyManagersServer) error
	FetchKeyManagers(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error)
	mustEmbedUnimplementedKMDiscoveryServiceServer()
}

// UnimplementedKMDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKMDiscoveryServiceServer struct {
}

func (UnimplementedKMDiscoveryServiceServer) StreamKeyManagers(KMDiscoveryService_StreamKeyManagersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamKeyManagers not implemented")
}
func (UnimplementedKMDiscoveryServiceServer) FetchKeyManagers(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchKeyManagers not implemented")
}
func (UnimplementedKMDiscoveryServiceServer) mustEmbedUnimplementedKMDiscoveryServiceServer() {}

// UnsafeKMDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KMDiscoveryServiceServer will
// result in compilation errors.
type UnsafeKMDiscoveryServiceServer interface {
	mustEmbedUnimplementedKMDiscoveryServiceServer()
}

func RegisterKMDiscoveryServiceServer(s grpc.ServiceRegistrar, srv KMDiscoveryServiceServer) {
	s.RegisterService(&KMDiscoveryService_ServiceDesc, srv)
}

func _KMDiscoveryService_StreamKeyManagers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KMDiscoveryServiceServer).StreamKeyManagers(&kMDiscoveryServiceStreamKeyManagersServer{stream})
}

type KMDiscoveryService_StreamKeyManagersServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type kMDiscoveryServiceStreamKeyManagersServer struct {
	grpc.ServerStream
}

func (x *kMDiscoveryServiceStreamKeyManagersServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kMDiscoveryServiceStreamKeyManagersServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KMDiscoveryService_FetchKeyManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMDiscoveryServiceServer).FetchKeyManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KMDiscoveryService/FetchKeyManagers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMDiscoveryServiceServer).FetchKeyManagers(ctx, req.(*v3.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KMDiscoveryService_ServiceDesc is the grpc.ServiceDesc for KMDiscoveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KMDiscoveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KMDiscoveryService",
	HandlerType: (*KMDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchKeyManagers",
			Handler:    _KMDiscoveryService_FetchKeyManagers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamKeyManagers",
			Handler:       _KMDiscoveryService_StreamKeyManagers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/keyManagerConfig/kmconfigds.proto",
}
